import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*;

class TagabukidPMISReportService 
{
	@ActiveDB(value='pmissuccessindicators', em='tagabukid_hrmis')
	def em


	@ActiveDB(value='pmissuccessindicators', em='tagabukid_subay')
	def emorg;
    
	@Service('DateService')
	def dtSvc 

	@Service('RPTUtil')
	def util

	@Env
	def env;

	@ProxyMethod
	public def getRatingStandardforIPCR(params){
		def data = [:]
	    
		def mfolist = em.getSIByOrgId( [orgid:params.org.OrgUnitId] );
		// println mfolist
		mfolist = mfolist.groupBy({[id:it.mfoid,title:it.mfotitle,code:it.mfocode]}).collect{k,v->
		     [
		        mfoid   :k.id,
		        mfotitle:k.title,
		        mfocode:k.code,
		        opcrlist:v.groupBy({[id:it.opid,title:it.optitle,code:it.opcode]}).collect{a,b->
		               [ 
		                opid    :a.id,
		                optitle :a.title,
		                opcode :a.code,
		                dpcrlist:b.groupBy({[id:it.dpid,title:it.dptitle,code:it.dpcode]}).collect{q,w->
		                       [ 
		                        dpid    :q.id,
		                        dptitle :q.title,
		                        dpcode :q.code,
		                        ipcrlist:w.groupBy({[id:it.successindicator.objid,title:it.successindicator.title,code:it.successindicator.code]}).collect{t,y->
	                                [    
	                                	ipid    :t.id,
	                            		iptitle :t.title,
	                            		ipcode :t.code,
	                            		ratingitems: y.r.groupBy({it.type})
                                    ]}.sort{it.ipcode}
		                       ]
		                 }.sort{it.dpcode}
		               ]
		         }.sort{it.opcode}
		     ]   
		}.sort{it.mfocode}
		// def mfolist = mfolist.groupBy({[id:it.mfoid,title:it.mfotitle,code:it.mfocode]}).collect{k,v->
		//      [
		//         mfoid   :k.id,
		//         mfotitle:k.title,
		//         mfocode:k.code,
		//         opcrlist:v.groupBy({[id:it.opid,title:it.optitle,code:it.opcode]}).collect{a,b->
		//                [ 
		//                 opid    :a.id,
		//                 optitle :a.title,
		//                 opcode :a.code,
		//                 dpcrlist:b.groupBy({[id:it.dpid,title:it.dptitle,code:it.dpcode]}).collect{q,w->
		//                        [ 
		//                         dpid    :q.id,
		//                         dptitle :q.title,
		//                         dpcode :q.code,
		//                         ipcrlist:w.groupBy({[id:it.successindicator.objid,title:it.successindicator.title,code:it.successindicator.code]}).collect{t,y->
		//                                [    
		//                                	ipid    :t.id,
		//                            		iptitle :t.title,
		//                            		ipcode :t.code,
		//                            		ratingitems: y.r.groupBy({
		//                                                   it.rating
		//                                       }).collect{u,i->
		//                                           [
		//                                               rating:u,
		//                                               qtitle:i.find{it.type == 'Q'}.title,
		//                                               etitle:i.find{it.type == 'E'}.title,
		//                                               ttitle:i.find{it.type == 'T'}.title
		//                                           ]
		//                                       }.sort{-it.rating}
		//                                   ]}.sort{it.ipcode}
		//                        ]
		//                  }.sort{it.dpcode}
		//                ]
		//          }.sort{it.opcode}
		//      ]   
		// }.sort{it.mfocode}
		println mfolist
		data.reportdata = mfolist;
	
		data.parameters = [
			TITLE  :"PGB-ESPSM DESCRIPTION OF RATING",
			PERIOD :params.period,
			// USERORG:dtssvc.getUserOrg(env.USERID).org.name,
			OFFICE :params.org.Entity.Name.toUpperCase(),
			// DOCTYPE:(params.documenttype ?  params.documenttype.name : "ALL"),
			// STATE  : null,
			// USERFULLNAME: (params.encoder ? params.encoder.fullname :  'ALL'),

		]
		return data


	}

	@ProxyMethod
	public def getPCRF(params){
		def data = [:]
		def items = [];

		if(params.type =='MFO'){
			params.title = 'Major Final Output (MFO)'
			items = em.getMFO();

		}else if(params.type == 'OPCR'){
			params.title = 'Office Performance Commitment and Review Form (OPCR)'
			items = em.getSIByOrgId( [orgid:params.org.OrgUnitId] ).groupBy({[id:it.mfoid,title:it.mfotitle,code:it.mfocode]}).collect{k,v->
			 [
			    mfoid   :k.id,
			    mfotitle:k.title,
			    mfocode:k.code,
			    opcrlist:v.groupBy({[id:it.opid,title:it.optitle,code:it.opcode]}).collect{a,b->
			           [ 
			            opid    :a.id,
			            optitle :a.title,
			            opcode :a.code
			           ]
			     }.sort{it.opcode}
			 ]   
			}.sort{it.mfocode}
		}else if(params.type == 'DPCR'){
			params.title = 'Department Performance Commitment and Review Form (DPCR)'
			items = em.getSIByOrgId( [orgid:params.org.OrgUnitId] ).groupBy({[id:it.mfoid,title:it.mfotitle,code:it.mfocode]}).collect{k,v->
			 [
			    mfoid   :k.id,
			    mfotitle:k.title,
			    mfocode:k.code,
			    opcrlist:v.groupBy({[id:it.opid,title:it.optitle,code:it.opcode]}).collect{a,b->
			           [ 
			            opid    :a.id,
			            optitle :a.title,
			            opcode :a.code,
			            dpcrlist:b.groupBy({[id:it.dpid,title:it.dptitle,code:it.dpcode]}).collect{q,w->
			                   [ 
			                    dpid    :q.id,
			                    dptitle :q.title,
			                    dpcode :q.code
			                   ]
			             }.sort{it.dpcode}
			           ]
			     }.sort{it.opcode}
			 ]   
			}.sort{it.mfocode}
		}else{
			params.title = 'Individual Performance Commitment and Review Form (IPCR)'
			items = em.getSIByOrgId( [orgid:params.org.OrgUnitId] ).groupBy({[id:it.mfoid,title:it.mfotitle,code:it.mfocode]}).collect{k,v->
			 [
			    mfoid   :k.id,
			    mfotitle:k.title,
			    mfocode:k.code,
			    opcrlist:v.groupBy({[id:it.opid,title:it.optitle,code:it.opcode]}).collect{a,b->
			           [ 
			            opid    :a.id,
			            optitle :a.title,
			            opcode :a.code,
			            dpcrlist:b.groupBy({[id:it.dpid,title:it.dptitle,code:it.dpcode]}).collect{q,w->
			                   [ 
			                    dpid    :q.id,
			                    dptitle :q.title,
			                    dpcode :q.code,
		                        ipcrlist:w.groupBy({[id:it.successindicator.objid,title:it.successindicator.title,code:it.successindicator.code]}).collect{t,y->
	                                [    
	                                	ipid    :t.id,
	                            		iptitle :t.title,
	                            		ipcode :t.code
                                    ]}.sort{it.ipcode}
		                       ]
			             }.sort{it.dpcode}
			           ]
			     }.sort{it.opcode}
			 ]   
			}.sort{it.mfocode}
		}
		
		println items
		data.reportdata = items;

		data.parameters = [
				TITLE  :params.title,
				PERIOD :params.strperiod,
				OFFICE :params.org,
			]

		return data

	}

	@ProxyMethod
	public def getIPCRByEmployee(params){
		

		params.filter = ''' AND ug.org_objid LIKE $P{orgid} AND dtyp.objid LIKE $P{dtypid} AND d.recordlog_createdbyuserid LIKE $P{userid}  '''
		if(params.period == "1st"){
			params.strperiod = "JANUARY - JUNE " + params.year

		}
		else {
			params.strperiod = "JULY - DECEMBER " + params.year
		}
		
		def items = em.getIPCRIndividual([year:params.year,period:params.period,PersonId:params.employee.PersonId.toString()]);
		def data = [:]
		
		println items

		data.reportdata = items;

		data.parameters = [
				TITLE  :"Individual Performance Commitment and Review (IPCR)",
				PERIOD :params.strperiod,
				OFFICE :params.org,

			

			]
		return data

	}


	// @ProxyMethod
	// public def getEmployee(){
	// 	return emorg.getEmployee([searchtext:'%'])

	// }

	// @ProxyMethod
	// public def getOffice(){
	// 	return emorg.getOrgUnit([searchtext:'%'])

	// }



	// @ProxyMethod
	// public def getListOfDocuments( params ) {
	// 	buildParams( params ); 
		
	// 	params.userid = (params.encoder ? params.encoder.objid :  '%');
	// 	params.dtypid = (params.documenttype ? params.documenttype.objid :  '%');
	// 	if (userRoleSvc.getUsers( [domain:'SUBAY', roles:'MASTER'] ).collect {it.objid}.contains(env.USERID)){
	// 		params.orgid = (params.org?.org ? params.org.org.objid : '%');
	// 		params.orgname =  (params.org?.org ? params.org.org.name : "ALL");
	// 	}else{
	// 		params.orgid  = dtssvc.getUserOrg(env.USERID).org.objid;
	// 		params.orgname = null;
	// 	}
		
	
	// 	params.filter = ''' AND ug.org_objid LIKE $P{orgid} AND dtyp.objid LIKE $P{dtypid} AND d.recordlog_createdbyuserid LIKE $P{userid}  '''
		
	// 	def items = em.getListOfDocuments(params);
	// 	def data = [:]

	// 	data.reportdata = items;

	// 	data.parameters = [
	// 			TITLE  :buildTitle(params) + " List of Document",
	// 			PERIOD :params.strperiod,
	// 			USERORG:dtssvc.getUserOrg(env.USERID).org.name,
	// 			OFFICE :params.orgname,
	// 			DOCTYPE:(params.documenttype ?  params.documenttype.name : "ALL"),
	// 			STATE  : null,
	// 			USERFULLNAME: (params.encoder ? params.encoder.fullname :  'ALL'),

	// 		]
	// 	return data
	// }

	// @ProxyMethod
	// public def getListOfDocumentTransactions( params ) {
	// 	buildParams( params ); 

	// 	params.dtypid = (params.documenttype ? params.documenttype.objid :  '%');
	// 	params.stateid = (params.state ? params.state.name : '%' );
	// 	if (userRoleSvc.getUsers( [domain:'SUBAY', roles:'MASTER'] ).collect {it.objid}.contains(env.USERID)){
	// 		params.orgid = (params.org?.org ? params.org.org.objid : '%');
	// 		params.orgname =  (params.org?.org ? params.org.org.name : "ALL");
	// 	}else{
	// 		params.orgid  = dtssvc.getUserOrg(env.USERID).org.objid;
	// 		params.orgname = null
	// 	}
		
		
		
	// 	switch(params.stateid) {
	// 		case 'idle':
	// 		case 'enroute' :
	// 		case 'processing' :
	// 		case 'closed' :
	// 		case 'archive' :
	// 		case 'attached' :
	// 		case 'archived' :
	// 		case 'offline' :
	// 		case 'outgoing' :
	// 		case 'redflag' :
	// 		case 'linked' :
	// 			params.filter += ''' dt.`startdate` BETWEEN $P{startdate} AND $P{enddate} AND dt.state LIKE $P{stateid} AND dto.org_objid LIKE $P{orgid} AND dtyp.objid LIKE $P{dtypid} ORDER BY dt.startdate '''
	// 			break;
	// 		case 'received':
	// 			params.filter += ''' dt.`enddate` BETWEEN $P{startdate} AND $P{enddate} AND dt.state LIKE "enroute" AND dto.org_objid LIKE $P{orgid} AND dtyp.objid LIKE $P{dtypid} ORDER BY dt.enddate '''
	// 			break;
	// 		case 'sent':
	// 			params.filter += ''' dt.`enddate` BETWEEN $P{startdate} AND $P{enddate} AND dt.state IN ("enroute","idle","processing","attached","linked") AND dto.org_objid LIKE $P{orgid} AND dtyp.objid LIKE $P{dtypid} ORDER BY dt.enddate '''
	// 			break;
	// 		default:
	// 			break;

	// 	}
		

	// 	def items = em.getListOfDocumentTransactions(params);
	// 	def data = [:]

	// 	data.reportdata = items;

	// 	data.parameters = [
	// 			TITLE  :buildTitle(params) + " List of Document Transaction",
	// 			PERIOD :params.strperiod,
	// 			USERORG:dtssvc.getUserOrg(env.USERID).org.name,
	// 			OFFICE :params.orgname,
	// 			DOCTYPE:(params.documenttype ?  params.documenttype.name : "ALL"),
	// 			STATE  : (params.state ?  params.state.title : "ALL"),

	// 		]
	// 	return data;
	// }

	// @ProxyMethod
	// public def getTopDocument( params ) {
	// 	buildParams( params ); 

	// 	params.dtypid = (params.documenttype ? params.documenttype.objid :  '%');
	// 	//params.stateid = (params.state ? params.state.name : '%' );
	// 	if (userRoleSvc.getUsers( [domain:'SUBAY', roles:'MASTER'] ).collect {it.objid}.contains(env.USERID)){
	// 		params.orgid = (params.org?.org ? params.org.org.objid : '%');
	// 		params.orgname =  (params.org?.org ? params.org.org.name : "ALL");
	// 	}else{
	// 		params.orgid  = dtssvc.getUserOrg(env.USERID).org.objid;
	// 		params.orgname = null;
	// 	}
		
		
		
	// 	params.filter += ''' dt.`startdate` BETWEEN $P{startdate} AND $P{enddate} 
	// 	AND dt.rgt = dt.lft + 1 
	// 	AND dt.state = $P{state} 
	// 	AND dto.org_objid LIKE $P{orgid} 
	// 	AND dtyp.objid LIKE $P{dtypid}
	// 	ORDER BY dt.startdate
	// 	LIMIT $P{topsize}'''
		

	// 	def items = em.getTopDocument(params);
	// 	def data = [:]

	// 	data.reportdata = items;

	// 	data.parameters = [
	// 			TITLE  :buildTitle(params) + " Top " + params.topsize + " Documents (" + params.state.toUpperCase() + ")" ,
	// 			PERIOD :params.strperiod,
	// 			USERORG:dtssvc.getUserOrg(env.USERID).org.name,
	// 			OFFICE :params.orgname,
	// 			DOCTYPE:(params.documenttype ?  params.documenttype.name : "ALL"),
	// 		]
	// 	return data;
	// }

	// @ProxyMethod
	// public def getDocumentLogs( params ) {


	// 	// def items = em.getDocumentTask(params);
	// 	def data = [:]
	// 	data.reportdata = params.tasks;
	// 	data.parameters = [
	// 			DIN        : params.din ,
	// 			TITLE      : params.title,
	// 			DESCRIPTION: params.description,
	// 			AUTHOR     : params.author,
	// 			DOCTYPE    : params.documenttype.name,
	// 			CREATEDBY  : params.recordlog.createdbyuser,
	// 			DTCREATED  : params.recordlog.datecreated,
	// 			USERORG    : dtssvc.getUserOrg(env.USERID).org.name,
	// 			DURATION   : params.duration,
	// 		]
	// 	return data;
	// }

	


	def buildTitle(params) {
		if (params.period == 'quarterly') return 'Quarterly'
        if (params.period == 'monthly') return 'Monthly'
        if (params.period == 'daily') return 'Daily'
        if (params.period == 'asofqtr') return 'Quarterly'
        if (params.period == 'asofmonth') return 'Monthly'
        if (params.period == 'asofday') return 'Daily'
	}

	@ProxyMethod
	public List getNumDays( year, month ) {
		if ( !month && month < 0 ) return []
		
		Calendar cal = Calendar.getInstance()
        cal.set( year, month, 1)
        int maxday = cal.getActualMaximum(cal.DAY_OF_MONTH)
		def numdays = []
		1.upto( maxday ) { numdays.add( it ) }
		return numdays 
	}

	@ProxyMethod
	public List getDocumentStates() {
		return [
		[name:'idle', title:'IDLE'],
		[name:'enroute', title:'ENROUTE'],
		[name:'received', title:'RECEIVED'],
		[name:'processing', title:'PROCESSING'],
		[name:'sent', title:'SENT'],
		[name:'closed', title:'CLOSED'],
		[name:'archive', title:'ARCHIVE'],
		[name:'attached', title:'ATTACHED'],
		[name:'archived', title:'ARCHIVED'],
		[name:'offline', title:'OFFLINE'],
		[name:'outgoing', title:'OUTGOING'],
		[name:'redflag', title:'REDFLAG'],
		[name:'linked', title:'LINKED']
		];
	
	}

	@ProxyMethod
	public Boolean getReportPermission() {
		return userRoleSvc.getUsers( [domain:'SUBAY', roles:'MASTER'] ).collect {it.objid}.contains(env.USERID)
	
	}

	void buildParams( params ) {
		params.filter = '';
		params.period = '';
		if(!params.asof){
			if(!params.month ){
				params.period = 'quarterly'
			}else if(!params.day){
				params.period = 'monthly'
			}else{
				params.period = 'daily'
				params.date = params.year +'-'+ params.month.index + '-' + params.day;
			}
		}else{
			if(!params.month ){
				params.period = 'asofqtr'
			}else if(!params.day){
				params.period = 'asofmonth'
			}else{
				params.period = 'asofday'
				params.date = params.year +'-'+ params.month.index + '-' + params.day;
			}
		}

		def period = new StringBuffer();
		def rundate = dtSvc.getServerDate(); 
		if ( params.period == 'quarterly' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.qtr ) throw new Exception('qtr is required');

			def months = dtSvc.getMonthsByQtr( params.qtr );
			def monthindex = months[0].index;
			def strmonth = (monthindex > 9? monthindex: '0'+monthindex); 
			params.startdate = params.year +'-'+ strmonth +'-01'; 
			params.enddate = dtSvc.getQtrEndDate( params.qtr, params.year ); 
			period.append( months[0].caption +' - '+ months[-1].caption +' '+ params.year ); 

		} else if ( params.period == 'asofqtr' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.qtr ) throw new Exception('qtr is required');

			def months = dtSvc.getMonths(); 
			period.append( months[0].caption );
			params.startdate = params.year +'-01-01'; 
			params.enddate = dtSvc.getQtrEndDate( params.qtr, params.year ); 

			months = dtSvc.getMonthsByQtr( params.qtr );
			period.append(' - '+ months[-1].caption +' '+ params.year ); 

		} else if ( params.period == 'monthly' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.month ) throw new Exception('month is required');

			def monthindex = params.month.index; 
			def strmonth = (monthindex > 9? monthindex: '0'+monthindex); 
			def dtstart = java.sql.Date.valueOf(''+ params.year +'-'+ strmonth +'-01'); 
			def dtend = dtSvc.getMonthEndDate( dtstart ); 
			def months = dtSvc.getMonths(); 
			params.startdate = dtstart;
			params.enddate = dtend;
			period.append( months[monthindex-1].caption +' '+ params.year ); 
		
		} else if ( params.period == 'asofmonth' ) {
			if ( !params.year ) throw new Exception('year is required');
			if ( !params.month ) throw new Exception('month is required');

			def monthindex = params.month.index; 
			def strmonth = (monthindex > 9? monthindex: '0'+monthindex); 
			def dtstart = java.sql.Date.valueOf(''+ params.year +'-01-01'); 
			def dtend = java.sql.Date.valueOf(''+ params.year +'-'+ strmonth +'-01');
			dtend = dtSvc.getMonthEndDate( dtend ); 

			def months = dtSvc.getMonths(); 
			params.startdate = dtstart;
			params.enddate = dtend;
			if ( months[0].index != months[monthindex-1].index ) { 
				period.append( months[0].caption ).append(' - '); 
			} 
			period.append( months[monthindex-1].caption ).append(' '+ params.year); 
		
		} else {
			if ( !params.date ) throw new Exception('date is required');

			def syear = params.date.toString().split('-')[0]; 
			if ( params.period == 'asofday' ) {
				period.append("As of "); 	
				params.startdate = syear +'-01-01'; 
			} else {
				params.startdate = params.date;
			}

			params.enddate = params.date; 
			params.year = syear; 

			def formatter = new java.text.SimpleDateFormat('MMMMM dd, yyyy');
			if ( params.date instanceof java.util.Date ) {
				period.append(formatter.format( params.date ));
			} else {
				period.append(formatter.format( java.sql.Date.valueOf( params.date ) )); 
			} 
		}
		params.strperiod = period.toString(); 
		
	}


}
